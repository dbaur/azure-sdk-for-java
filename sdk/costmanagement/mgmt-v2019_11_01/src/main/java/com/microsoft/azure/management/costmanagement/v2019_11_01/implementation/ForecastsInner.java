/**
 * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT License. See License.txt in the
 * project root for license information.
 * <p>
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.costmanagement.v2019_11_01.implementation;

import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.costmanagement.v2019_11_01.ErrorResponseException;
import com.microsoft.azure.management.costmanagement.v2019_11_01.ForecastDefinition;
import com.microsoft.azure.management.costmanagement.v2019_11_01.QueryDefinition;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.POST;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import rx.Observable;
import rx.functions.Func1;

/**
 * An instance of this class provides access to all the operations defined in Forecasts.
 */
public class ForecastsInner {

    /**
     * The Retrofit service to perform REST calls.
     */
    private ForecastsService service;
    /**
     * The service client containing this operation class.
     */
    private CostManagementClientImpl client;

    /**
     * Initializes an instance of ForecastsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client   the instance of the service client containing this operation class.
     */
    public ForecastsInner(Retrofit retrofit, CostManagementClientImpl client) {
        this.service = retrofit.create(ForecastsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Forecasts to be used by Retrofit to perform actually REST calls.
     */
    interface ForecastsService {

        @Headers({"Content-Type: application/json; charset=utf-8",
            "x-ms-logging-context: com.microsoft.azure.management.costmanagement.v2019_11_01.Forecasts usage"})
        @POST("{scope}/providers/Microsoft.CostManagement/forecast")
        Observable<Response<ResponseBody>> forecast(
            @Path(value = "scope", encoded = true) String scope,
            @Query("api-version") String apiVersion, @Body ForecastDefinition parameters,
            @Header("accept-language") String acceptLanguage,
            @Header("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8",
            "x-ms-logging-context: com.microsoft.azure.management.costmanagement.v2019_11_01.Forecasts usage"})
        @POST
        Observable<Response<ResponseBody>> forecastNext(@Url String nextUrl,
            @Body ForecastDefinition parameters, @Header("accept-language") String acceptLanguage,
            @Header("User-Agent") String userAgent);
    }

    /**
     * Query the usage data for scope defined.
     *
     * @param scope      The scope associated with forecast operations. This includes '/subscriptions/{subscriptionId}/'
     *                   for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
     *                   for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for
     *                   Billing Account scope and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
     *                   for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *                   for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}
     *                   for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *                   for billingProfile scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
     *                   for invoiceSection scope, and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}'
     *                   specific for partners.
     * @param parameters Parameters.
     * @return the QueryResultInner object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException   thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public QueryResultInner forecast(String scope, ForecastDefinition parameters) {
        return usageWithServiceResponseAsync(scope, parameters).toBlocking().single().body();
    }

    public QueryResultInner forecastNext(String url, ForecastDefinition parameters) {
        return usageNextWithServiceResponseAsync(url, parameters).toBlocking().single().body();
    }

    /**
     * Query the forecast data for scope defined.
     *
     * @param scope           The scope associated with forecast operations. This includes '/subscriptions/{subscriptionId}/'
     *                        for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
     *                        for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}'
     *                        for Billing Account scope and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
     *                        for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *                        for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}
     *                        for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *                        for billingProfile scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
     *                        for invoiceSection scope, and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}'
     *                        specific for partners.
     * @param parameters      Parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<QueryResultInner> forecastAsync(String scope, ForecastDefinition parameters,
        final ServiceCallback<QueryResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(usageWithServiceResponseAsync(scope, parameters), serviceCallback);
    }

    public ServiceFuture<QueryResultInner> forecastNextAsync(String url, ForecastDefinition parameters,
        final ServiceCallback<QueryResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(usageNextWithServiceResponseAsync(url, parameters), serviceCallback);
    }

    /**
     * Query the forecast data for scope defined.
     *
     * @param scope      The scope associated with forecast operations. This includes '/subscriptions/{subscriptionId}/'
     *                   for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
     *                   for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for
     *                   Billing Account scope and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
     *                   for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *                   for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}
     *                   for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *                   for billingProfile scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
     *                   for invoiceSection scope, and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}'
     *                   specific for partners.
     * @param parameters Parameters supplied to the CreateOrUpdate Query Config operation.
     * @return the observable to the QueryResultInner object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<QueryResultInner> usageAsync(String scope, ForecastDefinition parameters) {
        return usageWithServiceResponseAsync(scope, parameters)
            .map(new Func1<ServiceResponse<QueryResultInner>, QueryResultInner>() {
                @Override
                public QueryResultInner call(ServiceResponse<QueryResultInner> response) {
                    return response.body();
                }
            });
    }

    public Observable<QueryResultInner> usageNextAsync(String url, ForecastDefinition parameters) {
        return usageNextWithServiceResponseAsync(url, parameters)
            .map(new Func1<ServiceResponse<QueryResultInner>, QueryResultInner>() {
                @Override
                public QueryResultInner call(ServiceResponse<QueryResultInner> response) {
                    return response.body();
                }
            });
    }

    /**
     * Query the forecast data for scope defined.
     *
     * @param scope      The scope associated with forecast operations. This includes '/subscriptions/{subscriptionId}/'
     *                   for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
     *                   for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for
     *                   Billing Account scope and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
     *                   for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *                   for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}
     *                   for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *                   for billingProfile scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
     *                   for invoiceSection scope, and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}'
     *                   specific for partners.
     * @param parameters Parameters
     * @return the observable to the QueryResultInner object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<QueryResultInner>> usageWithServiceResponseAsync(String scope,
        ForecastDefinition parameters) {
        if (scope == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service
            .forecast(scope, this.client.apiVersion(), parameters, this.client.acceptLanguage(),
                this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<QueryResultInner>>>() {
                @Override
                public Observable<ServiceResponse<QueryResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<QueryResultInner> clientResponse = usageDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    public Observable<ServiceResponse<QueryResultInner>> usageNextWithServiceResponseAsync(String url,
        ForecastDefinition parameters) {
        if (url == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.forecastNext(url, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<QueryResultInner>>>() {
                @Override
                public Observable<ServiceResponse<QueryResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<QueryResultInner> clientResponse = usageDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<QueryResultInner> usageDelegate(Response<ResponseBody> response)
        throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<QueryResultInner, ErrorResponseException>newInstance(
            this.client.serializerAdapter())
            .register(200, new TypeToken<QueryResultInner>() {
            }.getType())
            .registerError(ErrorResponseException.class)
            .build(response);
    }

}
