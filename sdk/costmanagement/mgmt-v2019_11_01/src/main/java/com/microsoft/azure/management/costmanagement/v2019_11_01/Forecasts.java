/**
 * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT License. See License.txt in the
 * project root for license information.
 * <p>
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.costmanagement.v2019_11_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.costmanagement.v2019_11_01.implementation.ForecastsInner;
import com.microsoft.azure.management.costmanagement.v2019_11_01.implementation.QuerysInner;
import rx.Observable;

/**
 * Type representing Forecasts.
 */
public interface Forecasts extends HasInner<ForecastsInner> {

    /**
     * Lists the forecast charges for scope defined.
     *
     * @param scope      The scope associated with forecast operations. This includes '/subscriptions/{subscriptionId}/'
     *                   for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
     *                   for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for
     *                   Billing Account scope and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
     *                   for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *                   for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}
     *                   for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *                   for billingProfile scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
     *                   for invoiceSection scope, and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}'
     *                   specific for partners.
     * @param parameters Supplied Parameters.
     * @return an observable for the query result
     */
    Observable<QueryResult> forecastsAsync(String scope, ForecastDefinition parameters);

    /**
     * Lists the next page for the result set.
     *
     * @param url the next url returned by the previous query result
     * @param parameters the original parameters used.
     * @return an observable for the query result
     */
    Observable<QueryResult> forecastsNextAsync(String url, ForecastDefinition parameters);

}
